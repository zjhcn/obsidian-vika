/* vue-style:D:\projects\github\obsidian-vika\src\components\Pair.vue?type=style&index=0 */
.vika-pair {
  width: 100%;
  display: flex;
  justify-content: space-between;
}
.vika-pair--field--value-label {
  margin-left: 1em;
}
.vika-pair--suffix {
  text-align: right;
}

/* vue-style:D:\projects\github\obsidian-vika\src\components\PairList.vue?type=style&index=0 */
.vika-pair-list .vika-pair-list--p-0 {
  padding: 0;
}
.vika-pair-list--ctrls {
  width: 100%;
  display: flex;
  justify-content: flex-end;
}
/*# sourceMappingURL=data:application/json;base64, */
